// <auto-generated />
using System;
using Backend;
using Backend.DataAccessLayer.Context.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.DataAccessLayer.Migrations
{
    [DbContext(typeof(BaseraHotelReservationSystemContext))]
    partial class BaseraHotelReservationSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.TblAccess", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long?>("AccessProvidedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AccessProvidedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AccessUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AccessURL");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.HasIndex("AccessProvidedBy");

                    b.HasIndex("RoleId");

                    b.ToTable("tbl_Access", (string)null);
                });

            modelBuilder.Entity("Backend.TblAdmin", b =>
                {
                    b.Property<long>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AdminID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdminId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Adminname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("CityID");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CountryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EmailID");

                    b.Property<string>("FullName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint")
                        .HasColumnName("StateID");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AdminId");

                    b.HasIndex("Createdby");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("tbl_Admin", (string)null);
                });

            modelBuilder.Entity("Backend.TblAdminSession", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SessionId"));

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint")
                        .HasColumnName("Admin_id");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Devicelocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IP_Address");

                    b.Property<DateTime?>("SessionEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("Session_end");

                    b.Property<DateTime?>("SessionStart")
                        .HasColumnType("datetime")
                        .HasColumnName("Session_start");

                    b.HasKey("SessionId");

                    b.ToTable("tbl_AdminSession", (string)null);
                });

            modelBuilder.Entity("Backend.TblChannel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChannelId"));

                    b.Property<string>("ChannelName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("channel_name");

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("Createddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("createddate");

                    b.Property<long?>("Deletedby")
                        .HasColumnType("bigint")
                        .HasColumnName("deletedby");

                    b.Property<DateTime?>("Deleteddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("deleteddate");

                    b.Property<string>("Details")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("details");

                    b.Property<long?>("Updatedby")
                        .HasColumnType("bigint")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("Updateddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updateddate");

                    b.HasKey("ChannelId");

                    b.HasIndex("Createdby");

                    b.HasIndex("Deletedby");

                    b.HasIndex("Updatedby");

                    b.ToTable("tbl_channel", (string)null);
                });

            modelBuilder.Entity("Backend.TblChannelused", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("tbl_channelused", (string)null);
                });

            modelBuilder.Entity("Backend.TblCity", b =>
                {
                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint")
                        .HasColumnName("StateID");

                    b.HasKey("CityId");

                    b.ToTable("tbl_city", (string)null);
                });

            modelBuilder.Entity("Backend.TblCountry", b =>
                {
                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("countryId");

                    b.Property<string>("CountryName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("CountryId");

                    b.ToTable("tbl_Country", (string)null);
                });

            modelBuilder.Entity("Backend.TblHotel", b =>
                {
                    b.Property<long>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("HotelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HotelId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<byte[]>("BannerImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Banner_Image");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("Category_Id");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("CityID");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HotelDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Hotel_Description");

                    b.Property<string>("HotelName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("IconImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Icon_Image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("longitude");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("HotelId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("tbl_Hotel", (string)null);
                });

            modelBuilder.Entity("Backend.TblHotelcontactdetail", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contact_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("Createddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("createddate");

                    b.Property<long?>("Deletedby")
                        .HasColumnType("bigint")
                        .HasColumnName("deletedby");

                    b.Property<DateTime?>("Deleteddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("deleteddate");

                    b.Property<string>("HotelContactType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("hotel_contact_type");

                    b.Property<string>("HotelContactValue")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("hotel_contact_value");

                    b.Property<long?>("HotelId")
                        .HasColumnType("bigint")
                        .HasColumnName("hotel_id");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isprimary")
                        .HasColumnType("bit")
                        .HasColumnName("isprimary");

                    b.Property<long?>("Updatedby")
                        .HasColumnType("bigint")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("Updateddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updateddate");

                    b.HasKey("ContactId")
                        .HasName("PK__tbl_hote__024E7A8656FE4844");

                    b.HasIndex("Createdby");

                    b.HasIndex("Deletedby");

                    b.HasIndex("HotelId");

                    b.HasIndex("Updatedby");

                    b.ToTable("tbl_hotelcontactdetails", (string)null);
                });

            modelBuilder.Entity("Backend.TblHotelimage", b =>
                {
                    b.Property<int>("HotelImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("hotel_image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelImageId"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("content_type");

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("Createddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("createddate");

                    b.Property<long?>("Deletedby")
                        .HasColumnType("bigint")
                        .HasColumnName("deletedby");

                    b.Property<DateTime?>("Deleteddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("deleteddate");

                    b.Property<long?>("HotelId")
                        .HasColumnType("bigint")
                        .HasColumnName("hotel_id");

                    b.Property<string>("ImageName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("image_name");

                    b.Property<string>("Image")
                        .HasMaxLength(600)
                        .HasColumnType(" varbinary(MAX)")
                        .HasColumnName("image");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<long?>("Updatedby")
                        .HasColumnType("bigint")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("Updateddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updateddate");

                    b.HasKey("HotelImageId")
                        .HasName("PK__tbl_hote__066CE50E30442154");

                    b.HasIndex("Createdby");

                    b.HasIndex("Deletedby");

                    b.HasIndex("HotelId");

                    b.HasIndex("Updatedby");

                    b.ToTable("tbl_hotelimage", (string)null);
                });

            modelBuilder.Entity("Backend.TblInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Cancelleddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("cancelleddate");

                    b.Property<DateTime?>("Issueddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("issueddate");

                    b.Property<DateTime?>("Paiddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("paiddate");

                    b.Property<long?>("ReservationId")
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__tbl_invo__3213E83F1BD14D80");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_invoice", (string)null);
                });

            modelBuilder.Entity("Backend.TblReservation", b =>
                {
                    b.Property<long>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReservationId"));

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("datetime")
                        .HasColumnName("check_in_date");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("datetime")
                        .HasColumnName("check_Out_date");

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime")
                        .HasColumnName("createddate");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Updatedby")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ReservationId");

                    b.HasIndex("Createdby");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Updatedby");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_reservation", (string)null);
                });

            modelBuilder.Entity("Backend.TblReservationEventStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("details");

                    b.Property<long?>("ReservatioinStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("reservatioin_Status_id");

                    b.Property<long?>("ReservationId")
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_id");

                    b.HasKey("Id");

                    b.ToTable("tbl_reservation_event_status", (string)null);
                });

            modelBuilder.Entity("Backend.TblReservationStatus", b =>
                {
                    b.Property<long>("ReservationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReservationStatusId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint")
                        .HasColumnName("createdby");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Status")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.Property<long?>("Updatedby")
                        .HasColumnType("bigint");

                    b.HasKey("ReservationStatusId");

                    b.HasIndex("Createdby");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Updatedby");

                    b.ToTable("tbl_reservation_status", (string)null);
                });

            modelBuilder.Entity("Backend.TblReservedRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<long?>("ReservationId")
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_id");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("tbl_ReservedRooms", (string)null);
                });

            modelBuilder.Entity("Backend.TblReview", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<long?>("HotelId")
                        .HasColumnType("bigint")
                        .HasColumnName("hotel_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<long?>("ReviewedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("reviewedBy");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("reviewedDate");

                    b.HasKey("ReviewId");

                    b.ToTable("tbl_review", (string)null);
                });

            modelBuilder.Entity("Backend.TblRole", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Deletedby")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("RoleId");

                    b.HasIndex("Createdby");

                    b.HasIndex("Deletedby");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("tbl_Role", (string)null);
                });

            modelBuilder.Entity("Backend.TblRoom", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("Bannerimage")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)")
                        .HasColumnName("bannerimage");

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("Createddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("createddate");

                    b.Property<decimal?>("CurrentPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("current_price");

                    b.Property<long?>("Deletedby")
                        .HasColumnType("bigint")
                        .HasColumnName("deletedby");

                    b.Property<DateTime?>("Deleteddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("deleteddate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<long?>("HotelId")
                        .HasColumnType("bigint")
                        .HasColumnName("hotel_id");

                    b.Property<string>("Iconimage")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)")
                        .HasColumnName("iconimage");

                    b.Property<bool?>("IsReserved")
                        .HasColumnType("bit")
                        .HasColumnName("is_reserved");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<long?>("RoomTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("room_type_id");

                    b.Property<long?>("Updatedby")
                        .HasColumnType("bigint")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("Updateddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updateddate");

                    b.HasKey("RoomId")
                        .HasName("PK__tbl_room__19675A8A22DD1E4B");

                    b.ToTable("tbl_room", (string)null);
                });

            modelBuilder.Entity("Backend.TblRoomimage", b =>
                {
                    b.Property<string>("ContentType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("content_type");

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("Createddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("createddate");

                    b.Property<long?>("Deletedby")
                        .HasColumnType("bigint")
                        .HasColumnName("deletedby");

                    b.Property<DateTime?>("Deleteddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("deleteddate");

                    b.Property<string>("ImageName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image_name");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<int>("RoomImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("room_image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomImageId"));

                    b.Property<long?>("Updatedby")
                        .HasColumnType("bigint")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("Updateddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updateddate");

                    b.HasIndex("Createdby");

                    b.HasIndex("Deletedby");

                    b.HasIndex("RoomId");

                    b.HasIndex("Updatedby");

                    b.ToTable("tbl_roomimage", (string)null);
                });

            modelBuilder.Entity("Backend.TblRoomtype", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("room_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"));

                    b.Property<long?>("Createdby")
                        .HasColumnType("bigint")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("Createddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("createddate");

                    b.Property<long?>("Deletedby")
                        .HasColumnType("bigint")
                        .HasColumnName("deletedby");

                    b.Property<DateTime?>("Deleteddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("deleteddate");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<string>("RoomType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("room_type");

                    b.Property<long?>("Updatedby")
                        .HasColumnType("bigint")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("Updateddate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updateddate");

                    b.HasKey("RoomTypeId")
                        .HasName("PK__tbl_room__42395E84A0FE114D");

                    b.HasIndex("Createdby");

                    b.HasIndex("Deletedby");

                    b.HasIndex("Updatedby");

                    b.ToTable("tbl_roomtype", (string)null);
                });

            modelBuilder.Entity("Backend.TblState", b =>
                {
                    b.Property<long>("StateId")
                        .HasColumnType("bigint")
                        .HasColumnName("StateID");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CountryID");

                    b.Property<string>("StateName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("StateId");

                    b.ToTable("tbl_State", (string)null);
                });

            modelBuilder.Entity("Backend.TblUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("CityID");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CountryID");

                    b.Property<string>("EmailId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EmailID");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Iv")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("iv");

                    b.Property<string>("Key")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("key");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Password")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Salt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("salt");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint")
                        .HasColumnName("StateID");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("tbl_User", (string)null);
                });

            modelBuilder.Entity("Backend.TblAccess", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "AccessProvidedByNavigation")
                        .WithMany("TblAccesses")
                        .HasForeignKey("AccessProvidedBy")
                        .HasConstraintName("FK_tbl_Access_tbl_Admin");

                    b.HasOne("Backend.TblRole", "Role")
                        .WithMany("TblAccesses")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_tbl_Access_tbl_Role");

                    b.Navigation("AccessProvidedByNavigation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend.TblAdmin", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedbyNavigation")
                        .WithMany("TblAdminCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_tbl_Admin_tbl_AdminSession");

                    b.HasOne("Backend.TblAdminSession", "DeletedByNavigation")
                        .WithMany("TblAdminDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK_tbl_Admin_tbl_AdminSession1");

                    b.HasOne("Backend.TblAdminSession", "UpdatedByNavigation")
                        .WithMany("TblAdminUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_tbl_Admin_tbl_AdminSession2");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Backend.TblChannel", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedbyNavigation")
                        .WithMany("TblChannelCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_tbl_channel_tbl_AdminSession");

                    b.HasOne("Backend.TblAdminSession", "DeletedbyNavigation")
                        .WithMany("TblChannelDeletedbyNavigations")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("FK_tbl_channel_tbl_AdminSession1");

                    b.HasOne("Backend.TblAdminSession", "UpdatedbyNavigation")
                        .WithMany("TblChannelUpdatedbyNavigations")
                        .HasForeignKey("Updatedby")
                        .HasConstraintName("FK_tbl_channel_tbl_AdminSession2");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("DeletedbyNavigation");

                    b.Navigation("UpdatedbyNavigation");
                });

            modelBuilder.Entity("Backend.TblChannelused", b =>
                {
                    b.HasOne("Backend.TblChannel", "Channel")
                        .WithMany("TblChanneluseds")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("FK_tbl_channelused_tbl_channel");

                    b.HasOne("Backend.TblRoom", "IdNavigation")
                        .WithOne("TblChannelused")
                        .HasForeignKey("Backend.TblChannelused", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_channelused_tbl_room");

                    b.Navigation("Channel");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Backend.TblHotel", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedByNavigation")
                        .WithMany("TblHotelCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_Hotel_tbl_AdminSession");

                    b.HasOne("Backend.TblAdminSession", "DeletedByNavigation")
                        .WithMany("TblHotelDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK_tbl_Hotel_tbl_AdminSession2");

                    b.HasOne("Backend.TblAdminSession", "UpdatedByNavigation")
                        .WithMany("TblHotelUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_tbl_Hotel_tbl_AdminSession1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Backend.TblHotelcontactdetail", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedbyNavigation")
                        .WithMany("TblHotelcontactdetailCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_tbl_hotelcontactdetails_tbl_AdminSession1");

                    b.HasOne("Backend.TblAdminSession", "DeletedbyNavigation")
                        .WithMany("TblHotelcontactdetailDeletedbyNavigations")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("FK_tbl_hotelcontactdetails_tbl_AdminSession");

                    b.HasOne("Backend.TblHotel", "Hotel")
                        .WithMany("TblHotelcontactdetails")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_tbl_hotelcontactdetails_tbl_Hotel");

                    b.HasOne("Backend.TblAdminSession", "UpdatedbyNavigation")
                        .WithMany("TblHotelcontactdetailUpdatedbyNavigations")
                        .HasForeignKey("Updatedby")
                        .HasConstraintName("FK_tbl_hotelcontactdetails_tbl_AdminSession2");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("DeletedbyNavigation");

                    b.Navigation("Hotel");

                    b.Navigation("UpdatedbyNavigation");
                });

            modelBuilder.Entity("Backend.TblHotelimage", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedbyNavigation")
                        .WithMany("TblHotelimageCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_tbl_hotelimage_tbl_AdminSession");

                    b.HasOne("Backend.TblAdminSession", "DeletedbyNavigation")
                        .WithMany("TblHotelimageDeletedbyNavigations")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("FK_tbl_hotelimage_tbl_AdminSession2");

                    b.HasOne("Backend.TblHotel", "Hotel")
                        .WithMany("TblHotelimages")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_tbl_hotelimage_tbl_Hotel");

                    b.HasOne("Backend.TblAdminSession", "UpdatedbyNavigation")
                        .WithMany("TblHotelimageUpdatedbyNavigations")
                        .HasForeignKey("Updatedby")
                        .HasConstraintName("FK_tbl_hotelimage_tbl_AdminSession1");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("DeletedbyNavigation");

                    b.Navigation("Hotel");

                    b.Navigation("UpdatedbyNavigation");
                });

            modelBuilder.Entity("Backend.TblInvoice", b =>
                {
                    b.HasOne("Backend.TblReservation", "Reservation")
                        .WithMany("TblInvoices")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("FK_tbl_invoice_tbl_reservation");

                    b.HasOne("Backend.TblUser", "User")
                        .WithMany("TblInvoices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_invoice_tbl_User");

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.TblReservation", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedbyNavigation")
                        .WithMany("TblReservationCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_tbl_reservation_tbl_AdminSession1");

                    b.HasOne("Backend.TblAdminSession", "DeletedByNavigation")
                        .WithMany("TblReservationDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK_tbl_reservation_tbl_AdminSession2");

                    b.HasOne("Backend.TblAdminSession", "UpdatedbyNavigation")
                        .WithMany("TblReservationUpdatedbyNavigations")
                        .HasForeignKey("Updatedby")
                        .HasConstraintName("FK_tbl_reservation_tbl_AdminSession");

                    b.HasOne("Backend.TblUser", "User")
                        .WithMany("TblReservations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_reservation_tbl_User");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedbyNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.TblReservationStatus", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedbyNavigation")
                        .WithMany("TblReservationStatusCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_tbl_reservation_status_tbl_AdminSession2");

                    b.HasOne("Backend.TblAdminSession", "DeletedByNavigation")
                        .WithMany("TblReservationStatusDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK_tbl_reservation_status_tbl_AdminSession1");

                    b.HasOne("Backend.TblAdminSession", "UpdatedbyNavigation")
                        .WithMany("TblReservationStatusUpdatedbyNavigations")
                        .HasForeignKey("Updatedby")
                        .HasConstraintName("FK_tbl_reservation_status_tbl_AdminSession");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedbyNavigation");
                });

            modelBuilder.Entity("Backend.TblReservedRoom", b =>
                {
                    b.HasOne("Backend.TblRoom", "Room")
                        .WithMany("TblReservedRooms")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_tbl_ReservedRooms_tbl_ReservedRooms");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Backend.TblReview", b =>
                {
                    b.HasOne("Backend.TblUser", "Review")
                        .WithOne("TblReview")
                        .HasForeignKey("Backend.TblReview", "ReviewId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_review_tbl_User");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Backend.TblRole", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedbyNavigation")
                        .WithMany("TblRoleCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_tbl_Role_tbl_AdminSession");

                    b.HasOne("Backend.TblAdminSession", "DeletedbyNavigation")
                        .WithMany("TblRoleDeletedbyNavigations")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("FK_tbl_Role_tbl_AdminSession1");

                    b.HasOne("Backend.TblAdminSession", "UpdatedByNavigation")
                        .WithMany("TblRoleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_tbl_Role_tbl_AdminSession2");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("DeletedbyNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Backend.TblRoomimage", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedbyNavigation")
                        .WithMany()
                        .HasForeignKey("Createdby")
                        .HasConstraintName("FK_tbl_roomimage_tbl_AdminSession");

                    b.HasOne("Backend.TblAdminSession", "DeletedbyNavigation")
                        .WithMany()
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("FK_tbl_roomimage_tbl_AdminSession2");

                    b.HasOne("Backend.TblRoom", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_tbl_roomimage_tbl_room");

                    b.HasOne("Backend.TblAdminSession", "UpdatedbyNavigation")
                        .WithMany()
                        .HasForeignKey("Updatedby")
                        .HasConstraintName("FK_tbl_roomimage_tbl_AdminSession1");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("DeletedbyNavigation");

                    b.Navigation("Room");

                    b.Navigation("UpdatedbyNavigation");
                });

            modelBuilder.Entity("Backend.TblRoomtype", b =>
                {
                    b.HasOne("Backend.TblAdminSession", "CreatedbyNavigation")
                        .WithMany("TblRoomtypeCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .HasConstraintName("fk_createdby");

                    b.HasOne("Backend.TblAdminSession", "DeletedbyNavigation")
                        .WithMany("TblRoomtypeDeletedbyNavigations")
                        .HasForeignKey("Deletedby")
                        .HasConstraintName("fk_deletedby");

                    b.HasOne("Backend.TblAdminSession", "UpdatedbyNavigation")
                        .WithMany("TblRoomtypeUpdatedbyNavigations")
                        .HasForeignKey("Updatedby")
                        .HasConstraintName("fk_updatedby");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("DeletedbyNavigation");

                    b.Navigation("UpdatedbyNavigation");
                });

            modelBuilder.Entity("Backend.TblUser", b =>
                {
                    b.HasOne("Backend.TblCity", "City")
                        .WithMany("TblUsers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tbl_User_tbl_city");

                    b.HasOne("Backend.TblCountry", "Country")
                        .WithMany("TblUsers")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_tbl_User_tbl_Country");

                    b.HasOne("Backend.TblState", "State")
                        .WithMany("TblUsers")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_tbl_User_tbl_State");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Backend.TblAdminSession", b =>
                {
                    b.Navigation("TblAccesses");

                    b.Navigation("TblAdminCreatedbyNavigations");

                    b.Navigation("TblAdminDeletedByNavigations");

                    b.Navigation("TblAdminUpdatedByNavigations");

                    b.Navigation("TblChannelCreatedbyNavigations");

                    b.Navigation("TblChannelDeletedbyNavigations");

                    b.Navigation("TblChannelUpdatedbyNavigations");

                    b.Navigation("TblHotelCreatedByNavigations");

                    b.Navigation("TblHotelDeletedByNavigations");

                    b.Navigation("TblHotelUpdatedByNavigations");

                    b.Navigation("TblHotelcontactdetailCreatedbyNavigations");

                    b.Navigation("TblHotelcontactdetailDeletedbyNavigations");

                    b.Navigation("TblHotelcontactdetailUpdatedbyNavigations");

                    b.Navigation("TblHotelimageCreatedbyNavigations");

                    b.Navigation("TblHotelimageDeletedbyNavigations");

                    b.Navigation("TblHotelimageUpdatedbyNavigations");

                    b.Navigation("TblReservationCreatedbyNavigations");

                    b.Navigation("TblReservationDeletedByNavigations");

                    b.Navigation("TblReservationStatusCreatedbyNavigations");

                    b.Navigation("TblReservationStatusDeletedByNavigations");

                    b.Navigation("TblReservationStatusUpdatedbyNavigations");

                    b.Navigation("TblReservationUpdatedbyNavigations");

                    b.Navigation("TblRoleCreatedbyNavigations");

                    b.Navigation("TblRoleDeletedbyNavigations");

                    b.Navigation("TblRoleUpdatedByNavigations");

                    b.Navigation("TblRoomtypeCreatedbyNavigations");

                    b.Navigation("TblRoomtypeDeletedbyNavigations");

                    b.Navigation("TblRoomtypeUpdatedbyNavigations");
                });

            modelBuilder.Entity("Backend.TblChannel", b =>
                {
                    b.Navigation("TblChanneluseds");
                });

            modelBuilder.Entity("Backend.TblCity", b =>
                {
                    b.Navigation("TblUsers");
                });

            modelBuilder.Entity("Backend.TblCountry", b =>
                {
                    b.Navigation("TblUsers");
                });

            modelBuilder.Entity("Backend.TblHotel", b =>
                {
                    b.Navigation("TblHotelcontactdetails");

                    b.Navigation("TblHotelimages");
                });

            modelBuilder.Entity("Backend.TblReservation", b =>
                {
                    b.Navigation("TblInvoices");
                });

            modelBuilder.Entity("Backend.TblRole", b =>
                {
                    b.Navigation("TblAccesses");
                });

            modelBuilder.Entity("Backend.TblRoom", b =>
                {
                    b.Navigation("TblChannelused");

                    b.Navigation("TblReservedRooms");
                });

            modelBuilder.Entity("Backend.TblState", b =>
                {
                    b.Navigation("TblUsers");
                });

            modelBuilder.Entity("Backend.TblUser", b =>
                {
                    b.Navigation("TblInvoices");

                    b.Navigation("TblReservations");

                    b.Navigation("TblReview");
                });
#pragma warning restore 612, 618
        }
    }
}
